// Generated by Dagger (https://google.github.io/dagger).
package app.doscervezas.avocado.di;

import android.app.Activity;
import android.app.Application;
import android.app.Fragment;
import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.ContentProvider;
import androidx.lifecycle.ViewModel;
import app.doscervezas.avocado.db.DefaultRatesDatabase;
import app.doscervezas.avocado.db.RateDatabase;
import app.doscervezas.avocado.db.SpendDatabase;
import app.doscervezas.avocado.db.dao.BudgetDao;
import app.doscervezas.avocado.db.dao.DefaultRatesDao;
import app.doscervezas.avocado.db.dao.RateDao;
import app.doscervezas.avocado.db.dao.SpendDao;
import app.doscervezas.avocado.repository.DataRepository;
import app.doscervezas.avocado.ui.AddBudgetActivity;
import app.doscervezas.avocado.ui.EditBudgetActivity;
import app.doscervezas.avocado.ui.EditEntryActivity;
import app.doscervezas.avocado.ui.MainActivity;
import app.doscervezas.avocado.ui.SelectBudgetActivity;
import app.doscervezas.avocado.ui.ViewModelFactory;
import app.doscervezas.avocado.ui.ViewModelFactory_Factory;
import app.doscervezas.avocado.ui.fragments.AddBudgetFragment;
import app.doscervezas.avocado.ui.fragments.AddBudgetFragment_MembersInjector;
import app.doscervezas.avocado.ui.fragments.AddEntryFragment;
import app.doscervezas.avocado.ui.fragments.AddEntryFragment_MembersInjector;
import app.doscervezas.avocado.ui.fragments.DetailFragment;
import app.doscervezas.avocado.ui.fragments.DetailFragment_MembersInjector;
import app.doscervezas.avocado.ui.fragments.EditBudgetFragment;
import app.doscervezas.avocado.ui.fragments.EditBudgetFragment_MembersInjector;
import app.doscervezas.avocado.ui.fragments.EditEntryFragment;
import app.doscervezas.avocado.ui.fragments.EditEntryFragment_MembersInjector;
import app.doscervezas.avocado.ui.fragments.SelectBudgetFragment;
import app.doscervezas.avocado.ui.fragments.SelectBudgetFragment_MembersInjector;
import app.doscervezas.avocado.ui.fragments.SummaryFragment;
import app.doscervezas.avocado.ui.fragments.SummaryFragment_MembersInjector;
import app.doscervezas.avocado.ui.viewmodels.AddBudgetViewModel;
import app.doscervezas.avocado.ui.viewmodels.AddBudgetViewModel_Factory;
import app.doscervezas.avocado.ui.viewmodels.AddEntryViewModel;
import app.doscervezas.avocado.ui.viewmodels.AddEntryViewModel_Factory;
import app.doscervezas.avocado.ui.viewmodels.DetailFragmentViewModel;
import app.doscervezas.avocado.ui.viewmodels.DetailFragmentViewModel_Factory;
import app.doscervezas.avocado.ui.viewmodels.EditBudgetViewModel;
import app.doscervezas.avocado.ui.viewmodels.EditBudgetViewModel_Factory;
import app.doscervezas.avocado.ui.viewmodels.EditEntryViewModel;
import app.doscervezas.avocado.ui.viewmodels.EditEntryViewModel_Factory;
import app.doscervezas.avocado.ui.viewmodels.SelectBudgetViewModel;
import app.doscervezas.avocado.ui.viewmodels.SelectBudgetViewModel_Factory;
import app.doscervezas.avocado.ui.viewmodels.SummaryViewModel;
import app.doscervezas.avocado.ui.viewmodels.SummaryViewModel_Factory;
import app.doscervezas.avocado.vo.MyApp;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;

public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent.Builder>
      mainActivitySubcomponentBuilderProvider;

  private Provider<
          ActivityBuildersModule_ContributeEditEntryActivity.EditEntryActivitySubcomponent.Builder>
      editEntryActivitySubcomponentBuilderProvider;

  private Provider<
          ActivityBuildersModule_ContributeSelectBudgetActivity.SelectBudgetActivitySubcomponent
              .Builder>
      selectBudgetActivitySubcomponentBuilderProvider;

  private Provider<
          ActivityBuildersModule_ContributeAddBudgetActivity.AddBudgetActivitySubcomponent.Builder>
      addBudgetActivitySubcomponentBuilderProvider;

  private Provider<
          ActivityBuildersModule_ContributeEditBudgetActivity.EditBudgetActivitySubcomponent
              .Builder>
      editBudgetActivitySubcomponentBuilderProvider;

  private Provider<Application> applicationProvider;

  private Provider<RateDatabase> provideRateDatabaseProvider;

  private Provider<RateDao> provideRateDaoProvider;

  private Provider<DefaultRatesDatabase> provideDefaultRatesDatabaseProvider;

  private Provider<DefaultRatesDao> provideDefaultRatesDaoProvider;

  private Provider<SpendDatabase> provideSpendDatabaseProvider;

  private Provider<SpendDao> provideSpendDaoProvider;

  private Provider<BudgetDao> provideBudgetDaoProvider;

  private Provider<DataRepository> provideDataRepositoryProvider;

  private AddEntryViewModel_Factory addEntryViewModelProvider;

  private DetailFragmentViewModel_Factory detailFragmentViewModelProvider;

  private EditEntryViewModel_Factory editEntryViewModelProvider;

  private SelectBudgetViewModel_Factory selectBudgetViewModelProvider;

  private AddBudgetViewModel_Factory addBudgetViewModelProvider;

  private EditBudgetViewModel_Factory editBudgetViewModelProvider;

  private SummaryViewModel_Factory summaryViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>>
      mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<ViewModelFactory> viewModelFactoryProvider;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return MapBuilder
        .<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
            newMapBuilder(5)
        .put(MainActivity.class, (Provider) mainActivitySubcomponentBuilderProvider)
        .put(EditEntryActivity.class, (Provider) editEntryActivitySubcomponentBuilderProvider)
        .put(SelectBudgetActivity.class, (Provider) selectBudgetActivitySubcomponentBuilderProvider)
        .put(AddBudgetActivity.class, (Provider) addBudgetActivitySubcomponentBuilderProvider)
        .put(EditBudgetActivity.class, (Provider) editBudgetActivitySubcomponentBuilderProvider)
        .build();
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf());
  }

  private DispatchingAndroidInjector<BroadcastReceiver>
      getDispatchingAndroidInjectorOfBroadcastReceiver() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends BroadcastReceiver>,
                Provider<AndroidInjector.Factory<? extends BroadcastReceiver>>>
                emptyMap());
  }

  private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
                emptyMap());
  }

  private DispatchingAndroidInjector<Service> getDispatchingAndroidInjectorOfService() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends Service>, Provider<AndroidInjector.Factory<? extends Service>>>
                emptyMap());
  }

  private DispatchingAndroidInjector<ContentProvider>
      getDispatchingAndroidInjectorOfContentProvider() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends ContentProvider>,
                Provider<AndroidInjector.Factory<? extends ContentProvider>>>
                emptyMap());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.mainActivitySubcomponentBuilderProvider =
        new Provider<
            ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent.Builder>() {
          @Override
          public ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent.Builder
              get() {
            return new MainActivitySubcomponentBuilder();
          }
        };
    this.editEntryActivitySubcomponentBuilderProvider =
        new Provider<
            ActivityBuildersModule_ContributeEditEntryActivity.EditEntryActivitySubcomponent
                .Builder>() {
          @Override
          public ActivityBuildersModule_ContributeEditEntryActivity.EditEntryActivitySubcomponent
                  .Builder
              get() {
            return new EditEntryActivitySubcomponentBuilder();
          }
        };
    this.selectBudgetActivitySubcomponentBuilderProvider =
        new Provider<
            ActivityBuildersModule_ContributeSelectBudgetActivity.SelectBudgetActivitySubcomponent
                .Builder>() {
          @Override
          public ActivityBuildersModule_ContributeSelectBudgetActivity
                  .SelectBudgetActivitySubcomponent.Builder
              get() {
            return new SelectBudgetActivitySubcomponentBuilder();
          }
        };
    this.addBudgetActivitySubcomponentBuilderProvider =
        new Provider<
            ActivityBuildersModule_ContributeAddBudgetActivity.AddBudgetActivitySubcomponent
                .Builder>() {
          @Override
          public ActivityBuildersModule_ContributeAddBudgetActivity.AddBudgetActivitySubcomponent
                  .Builder
              get() {
            return new AddBudgetActivitySubcomponentBuilder();
          }
        };
    this.editBudgetActivitySubcomponentBuilderProvider =
        new Provider<
            ActivityBuildersModule_ContributeEditBudgetActivity.EditBudgetActivitySubcomponent
                .Builder>() {
          @Override
          public ActivityBuildersModule_ContributeEditBudgetActivity.EditBudgetActivitySubcomponent
                  .Builder
              get() {
            return new EditBudgetActivitySubcomponentBuilder();
          }
        };
    this.applicationProvider = InstanceFactory.create(builder.application);
    this.provideRateDatabaseProvider =
        DoubleCheck.provider(
            AppModule_ProvideRateDatabaseFactory.create(builder.appModule, applicationProvider));
    this.provideRateDaoProvider =
        DoubleCheck.provider(
            AppModule_ProvideRateDaoFactory.create(builder.appModule, provideRateDatabaseProvider));
    this.provideDefaultRatesDatabaseProvider =
        DoubleCheck.provider(
            AppModule_ProvideDefaultRatesDatabaseFactory.create(
                builder.appModule, applicationProvider));
    this.provideDefaultRatesDaoProvider =
        DoubleCheck.provider(
            AppModule_ProvideDefaultRatesDaoFactory.create(
                builder.appModule, provideDefaultRatesDatabaseProvider));
    this.provideSpendDatabaseProvider =
        DoubleCheck.provider(
            AppModule_ProvideSpendDatabaseFactory.create(builder.appModule, applicationProvider));
    this.provideSpendDaoProvider =
        DoubleCheck.provider(
            AppModule_ProvideSpendDaoFactory.create(
                builder.appModule, provideSpendDatabaseProvider));
    this.provideBudgetDaoProvider =
        DoubleCheck.provider(
            AppModule_ProvideBudgetDaoFactory.create(
                builder.appModule, provideSpendDatabaseProvider));
    this.provideDataRepositoryProvider =
        DoubleCheck.provider(
            AppModule_ProvideDataRepositoryFactory.create(
                builder.appModule,
                provideRateDaoProvider,
                provideDefaultRatesDaoProvider,
                provideSpendDaoProvider,
                provideBudgetDaoProvider,
                applicationProvider));
    this.addEntryViewModelProvider =
        AddEntryViewModel_Factory.create(
            provideDataRepositoryProvider, provideSpendDaoProvider, provideBudgetDaoProvider);
    this.detailFragmentViewModelProvider =
        DetailFragmentViewModel_Factory.create(
            provideDataRepositoryProvider, provideSpendDaoProvider, provideBudgetDaoProvider);
    this.editEntryViewModelProvider =
        EditEntryViewModel_Factory.create(provideSpendDaoProvider, provideDataRepositoryProvider);
    this.selectBudgetViewModelProvider =
        SelectBudgetViewModel_Factory.create(provideBudgetDaoProvider);
    this.addBudgetViewModelProvider = AddBudgetViewModel_Factory.create(provideBudgetDaoProvider);
    this.editBudgetViewModelProvider =
        EditBudgetViewModel_Factory.create(provideBudgetDaoProvider, provideDataRepositoryProvider);
    this.summaryViewModelProvider =
        SummaryViewModel_Factory.create(provideBudgetDaoProvider, provideSpendDaoProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider =
        MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(7)
            .put(AddEntryViewModel.class, (Provider) addEntryViewModelProvider)
            .put(DetailFragmentViewModel.class, (Provider) detailFragmentViewModelProvider)
            .put(EditEntryViewModel.class, (Provider) editEntryViewModelProvider)
            .put(SelectBudgetViewModel.class, (Provider) selectBudgetViewModelProvider)
            .put(AddBudgetViewModel.class, (Provider) addBudgetViewModelProvider)
            .put(EditBudgetViewModel.class, (Provider) editBudgetViewModelProvider)
            .put(SummaryViewModel.class, (Provider) summaryViewModelProvider)
            .build();
    this.viewModelFactoryProvider =
        DoubleCheck.provider(
            ViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
  }

  @Override
  public void inject(MyApp myApp) {
    injectMyApp(myApp);
  }

  @Override
  public void inject(DaggerApplication instance) {
    injectDaggerApplication(instance);
  }

  private MyApp injectMyApp(MyApp instance) {
    DaggerApplication_MembersInjector.injectActivityInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    DaggerApplication_MembersInjector.injectBroadcastReceiverInjector(
        instance, getDispatchingAndroidInjectorOfBroadcastReceiver());
    DaggerApplication_MembersInjector.injectFragmentInjector(
        instance, getDispatchingAndroidInjectorOfFragment());
    DaggerApplication_MembersInjector.injectServiceInjector(
        instance, getDispatchingAndroidInjectorOfService());
    DaggerApplication_MembersInjector.injectContentProviderInjector(
        instance, getDispatchingAndroidInjectorOfContentProvider());
    DaggerApplication_MembersInjector.injectSetInjected(instance);
    return instance;
  }

  private DaggerApplication injectDaggerApplication(DaggerApplication instance) {
    DaggerApplication_MembersInjector.injectActivityInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    DaggerApplication_MembersInjector.injectBroadcastReceiverInjector(
        instance, getDispatchingAndroidInjectorOfBroadcastReceiver());
    DaggerApplication_MembersInjector.injectFragmentInjector(
        instance, getDispatchingAndroidInjectorOfFragment());
    DaggerApplication_MembersInjector.injectServiceInjector(
        instance, getDispatchingAndroidInjectorOfService());
    DaggerApplication_MembersInjector.injectContentProviderInjector(
        instance, getDispatchingAndroidInjectorOfContentProvider());
    DaggerApplication_MembersInjector.injectSetInjected(instance);
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private AppModule appModule;

    private Application application;

    @Override
    public AppComponent build() {
      if (appModule == null) {
        this.appModule = new AppModule();
      }
      if (application == null) {
        throw new IllegalStateException(Application.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }
  }

  private final class MainActivitySubcomponentBuilder
      extends ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent.Builder {
    private MainActivity seedInstance;

    @Override
    public ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(MainActivity.class.getCanonicalName() + " must be set");
      }
      return new MainActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(MainActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl
      implements ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent {
    private Provider<
            FragmentBuildersModule_ContributeAddEntryFragment.AddEntryFragmentSubcomponent.Builder>
        addEntryFragmentSubcomponentBuilderProvider;

    private Provider<
            FragmentBuildersModule_ContributeDetailFragment.DetailFragmentSubcomponent.Builder>
        detailFragmentSubcomponentBuilderProvider;

    private Provider<
            FragmentBuildersModule_ContributeSelectBudgetFragment.SelectBudgetFragmentSubcomponent
                .Builder>
        selectBudgetFragmentSubcomponentBuilderProvider;

    private Provider<
            FragmentBuildersModule_ContributeAddBudgetFragment.AddBudgetFragmentSubcomponent
                .Builder>
        addBudgetFragmentSubcomponentBuilderProvider;

    private Provider<
            FragmentBuildersModule_ContributeEditBudgetFragment.EditBudgetFragmentSubcomponent
                .Builder>
        editBudgetFragmentSubcomponentBuilderProvider;

    private Provider<
            FragmentBuildersModule_ContributeSummaryFragment.SummaryFragmentSubcomponent.Builder>
        summaryFragmentSubcomponentBuilderProvider;

    private Provider<
            FragmentBuildersModule_ContributeEditEntryFragment.EditEntryFragmentSubcomponent
                .Builder>
        editEntryFragmentSubcomponentBuilderProvider;

    private MainActivitySubcomponentImpl(MainActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    private Map<
            Class<? extends androidx.fragment.app.Fragment>,
            Provider<AndroidInjector.Factory<? extends androidx.fragment.app.Fragment>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return MapBuilder
          .<Class<? extends androidx.fragment.app.Fragment>,
              Provider<AndroidInjector.Factory<? extends androidx.fragment.app.Fragment>>>
              newMapBuilder(7)
          .put(AddEntryFragment.class, (Provider) addEntryFragmentSubcomponentBuilderProvider)
          .put(DetailFragment.class, (Provider) detailFragmentSubcomponentBuilderProvider)
          .put(
              SelectBudgetFragment.class,
              (Provider) selectBudgetFragmentSubcomponentBuilderProvider)
          .put(AddBudgetFragment.class, (Provider) addBudgetFragmentSubcomponentBuilderProvider)
          .put(EditBudgetFragment.class, (Provider) editBudgetFragmentSubcomponentBuilderProvider)
          .put(SummaryFragment.class, (Provider) summaryFragmentSubcomponentBuilderProvider)
          .put(EditEntryFragment.class, (Provider) editEntryFragmentSubcomponentBuilderProvider)
          .build();
    }

    private DispatchingAndroidInjector<androidx.fragment.app.Fragment>
        getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivitySubcomponentBuilder builder) {
      this.addEntryFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeAddEntryFragment.AddEntryFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeAddEntryFragment.AddEntryFragmentSubcomponent
                    .Builder
                get() {
              return new AddEntryFragmentSubcomponentBuilder();
            }
          };
      this.detailFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeDetailFragment.DetailFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeDetailFragment.DetailFragmentSubcomponent
                    .Builder
                get() {
              return new DetailFragmentSubcomponentBuilder();
            }
          };
      this.selectBudgetFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeSelectBudgetFragment.SelectBudgetFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeSelectBudgetFragment
                    .SelectBudgetFragmentSubcomponent.Builder
                get() {
              return new SelectBudgetFragmentSubcomponentBuilder();
            }
          };
      this.addBudgetFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeAddBudgetFragment.AddBudgetFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeAddBudgetFragment.AddBudgetFragmentSubcomponent
                    .Builder
                get() {
              return new AddBudgetFragmentSubcomponentBuilder();
            }
          };
      this.editBudgetFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeEditBudgetFragment.EditBudgetFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeEditBudgetFragment
                    .EditBudgetFragmentSubcomponent.Builder
                get() {
              return new EditBudgetFragmentSubcomponentBuilder();
            }
          };
      this.summaryFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeSummaryFragment.SummaryFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeSummaryFragment.SummaryFragmentSubcomponent
                    .Builder
                get() {
              return new SummaryFragmentSubcomponentBuilder();
            }
          };
      this.editEntryFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeEditEntryFragment.EditEntryFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeEditEntryFragment.EditEntryFragmentSubcomponent
                    .Builder
                get() {
              return new EditEntryFragmentSubcomponentBuilder();
            }
          };
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectSupportFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      DaggerAppCompatActivity_MembersInjector.injectFrameworkFragmentInjector(
          instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfFragment());
      return instance;
    }

    private final class AddEntryFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeAddEntryFragment.AddEntryFragmentSubcomponent
            .Builder {
      private AddEntryFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeAddEntryFragment.AddEntryFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              AddEntryFragment.class.getCanonicalName() + " must be set");
        }
        return new AddEntryFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(AddEntryFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class AddEntryFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeAddEntryFragment.AddEntryFragmentSubcomponent {
      private AddEntryFragmentSubcomponentImpl(AddEntryFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(AddEntryFragment arg0) {
        injectAddEntryFragment(arg0);
      }

      private AddEntryFragment injectAddEntryFragment(AddEntryFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        AddEntryFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class DetailFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeDetailFragment.DetailFragmentSubcomponent.Builder {
      private DetailFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeDetailFragment.DetailFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(DetailFragment.class.getCanonicalName() + " must be set");
        }
        return new DetailFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(DetailFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class DetailFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeDetailFragment.DetailFragmentSubcomponent {
      private DetailFragmentSubcomponentImpl(DetailFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(DetailFragment arg0) {
        injectDetailFragment(arg0);
      }

      private DetailFragment injectDetailFragment(DetailFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        DetailFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class SelectBudgetFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeSelectBudgetFragment
            .SelectBudgetFragmentSubcomponent.Builder {
      private SelectBudgetFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeSelectBudgetFragment.SelectBudgetFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              SelectBudgetFragment.class.getCanonicalName() + " must be set");
        }
        return new SelectBudgetFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(SelectBudgetFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class SelectBudgetFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeSelectBudgetFragment
            .SelectBudgetFragmentSubcomponent {
      private SelectBudgetFragmentSubcomponentImpl(
          SelectBudgetFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(SelectBudgetFragment arg0) {
        injectSelectBudgetFragment(arg0);
      }

      private SelectBudgetFragment injectSelectBudgetFragment(SelectBudgetFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        SelectBudgetFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class AddBudgetFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeAddBudgetFragment.AddBudgetFragmentSubcomponent
            .Builder {
      private AddBudgetFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeAddBudgetFragment.AddBudgetFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              AddBudgetFragment.class.getCanonicalName() + " must be set");
        }
        return new AddBudgetFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(AddBudgetFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class AddBudgetFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeAddBudgetFragment
            .AddBudgetFragmentSubcomponent {
      private AddBudgetFragmentSubcomponentImpl(AddBudgetFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(AddBudgetFragment arg0) {
        injectAddBudgetFragment(arg0);
      }

      private AddBudgetFragment injectAddBudgetFragment(AddBudgetFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        AddBudgetFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class EditBudgetFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeEditBudgetFragment.EditBudgetFragmentSubcomponent
            .Builder {
      private EditBudgetFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeEditBudgetFragment.EditBudgetFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              EditBudgetFragment.class.getCanonicalName() + " must be set");
        }
        return new EditBudgetFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(EditBudgetFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class EditBudgetFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeEditBudgetFragment
            .EditBudgetFragmentSubcomponent {
      private EditBudgetFragmentSubcomponentImpl(EditBudgetFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(EditBudgetFragment arg0) {
        injectEditBudgetFragment(arg0);
      }

      private EditBudgetFragment injectEditBudgetFragment(EditBudgetFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        EditBudgetFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class SummaryFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeSummaryFragment.SummaryFragmentSubcomponent
            .Builder {
      private SummaryFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeSummaryFragment.SummaryFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              SummaryFragment.class.getCanonicalName() + " must be set");
        }
        return new SummaryFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(SummaryFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class SummaryFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeSummaryFragment.SummaryFragmentSubcomponent {
      private SummaryFragmentSubcomponentImpl(SummaryFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(SummaryFragment arg0) {
        injectSummaryFragment(arg0);
      }

      private SummaryFragment injectSummaryFragment(SummaryFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        SummaryFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class EditEntryFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeEditEntryFragment.EditEntryFragmentSubcomponent
            .Builder {
      private EditEntryFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeEditEntryFragment.EditEntryFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              EditEntryFragment.class.getCanonicalName() + " must be set");
        }
        return new EditEntryFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(EditEntryFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class EditEntryFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeEditEntryFragment
            .EditEntryFragmentSubcomponent {
      private EditEntryFragmentSubcomponentImpl(EditEntryFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(EditEntryFragment arg0) {
        injectEditEntryFragment(arg0);
      }

      private EditEntryFragment injectEditEntryFragment(EditEntryFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        EditEntryFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }
  }

  private final class EditEntryActivitySubcomponentBuilder
      extends ActivityBuildersModule_ContributeEditEntryActivity.EditEntryActivitySubcomponent
          .Builder {
    private EditEntryActivity seedInstance;

    @Override
    public ActivityBuildersModule_ContributeEditEntryActivity.EditEntryActivitySubcomponent
        build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            EditEntryActivity.class.getCanonicalName() + " must be set");
      }
      return new EditEntryActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(EditEntryActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class EditEntryActivitySubcomponentImpl
      implements ActivityBuildersModule_ContributeEditEntryActivity.EditEntryActivitySubcomponent {
    private Provider<
            FragmentBuildersModule_ContributeAddEntryFragment.AddEntryFragmentSubcomponent.Builder>
        addEntryFragmentSubcomponentBuilderProvider;

    private Provider<
            FragmentBuildersModule_ContributeDetailFragment.DetailFragmentSubcomponent.Builder>
        detailFragmentSubcomponentBuilderProvider;

    private Provider<
            FragmentBuildersModule_ContributeSelectBudgetFragment.SelectBudgetFragmentSubcomponent
                .Builder>
        selectBudgetFragmentSubcomponentBuilderProvider;

    private Provider<
            FragmentBuildersModule_ContributeAddBudgetFragment.AddBudgetFragmentSubcomponent
                .Builder>
        addBudgetFragmentSubcomponentBuilderProvider;

    private Provider<
            FragmentBuildersModule_ContributeEditBudgetFragment.EditBudgetFragmentSubcomponent
                .Builder>
        editBudgetFragmentSubcomponentBuilderProvider;

    private Provider<
            FragmentBuildersModule_ContributeSummaryFragment.SummaryFragmentSubcomponent.Builder>
        summaryFragmentSubcomponentBuilderProvider;

    private Provider<
            FragmentBuildersModule_ContributeEditEntryFragment.EditEntryFragmentSubcomponent
                .Builder>
        editEntryFragmentSubcomponentBuilderProvider;

    private EditEntryActivitySubcomponentImpl(EditEntryActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    private Map<
            Class<? extends androidx.fragment.app.Fragment>,
            Provider<AndroidInjector.Factory<? extends androidx.fragment.app.Fragment>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return MapBuilder
          .<Class<? extends androidx.fragment.app.Fragment>,
              Provider<AndroidInjector.Factory<? extends androidx.fragment.app.Fragment>>>
              newMapBuilder(7)
          .put(AddEntryFragment.class, (Provider) addEntryFragmentSubcomponentBuilderProvider)
          .put(DetailFragment.class, (Provider) detailFragmentSubcomponentBuilderProvider)
          .put(
              SelectBudgetFragment.class,
              (Provider) selectBudgetFragmentSubcomponentBuilderProvider)
          .put(AddBudgetFragment.class, (Provider) addBudgetFragmentSubcomponentBuilderProvider)
          .put(EditBudgetFragment.class, (Provider) editBudgetFragmentSubcomponentBuilderProvider)
          .put(SummaryFragment.class, (Provider) summaryFragmentSubcomponentBuilderProvider)
          .put(EditEntryFragment.class, (Provider) editEntryFragmentSubcomponentBuilderProvider)
          .build();
    }

    private DispatchingAndroidInjector<androidx.fragment.app.Fragment>
        getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final EditEntryActivitySubcomponentBuilder builder) {
      this.addEntryFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeAddEntryFragment.AddEntryFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeAddEntryFragment.AddEntryFragmentSubcomponent
                    .Builder
                get() {
              return new AddEntryFragmentSubcomponentBuilder();
            }
          };
      this.detailFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeDetailFragment.DetailFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeDetailFragment.DetailFragmentSubcomponent
                    .Builder
                get() {
              return new DetailFragmentSubcomponentBuilder();
            }
          };
      this.selectBudgetFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeSelectBudgetFragment.SelectBudgetFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeSelectBudgetFragment
                    .SelectBudgetFragmentSubcomponent.Builder
                get() {
              return new SelectBudgetFragmentSubcomponentBuilder();
            }
          };
      this.addBudgetFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeAddBudgetFragment.AddBudgetFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeAddBudgetFragment.AddBudgetFragmentSubcomponent
                    .Builder
                get() {
              return new AddBudgetFragmentSubcomponentBuilder();
            }
          };
      this.editBudgetFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeEditBudgetFragment.EditBudgetFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeEditBudgetFragment
                    .EditBudgetFragmentSubcomponent.Builder
                get() {
              return new EditBudgetFragmentSubcomponentBuilder();
            }
          };
      this.summaryFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeSummaryFragment.SummaryFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeSummaryFragment.SummaryFragmentSubcomponent
                    .Builder
                get() {
              return new SummaryFragmentSubcomponentBuilder();
            }
          };
      this.editEntryFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeEditEntryFragment.EditEntryFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeEditEntryFragment.EditEntryFragmentSubcomponent
                    .Builder
                get() {
              return new EditEntryFragmentSubcomponentBuilder();
            }
          };
    }

    @Override
    public void inject(EditEntryActivity arg0) {
      injectEditEntryActivity(arg0);
    }

    private EditEntryActivity injectEditEntryActivity(EditEntryActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectSupportFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      DaggerAppCompatActivity_MembersInjector.injectFrameworkFragmentInjector(
          instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfFragment());
      return instance;
    }

    private final class AddEntryFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeAddEntryFragment.AddEntryFragmentSubcomponent
            .Builder {
      private AddEntryFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeAddEntryFragment.AddEntryFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              AddEntryFragment.class.getCanonicalName() + " must be set");
        }
        return new AddEntryFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(AddEntryFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class AddEntryFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeAddEntryFragment.AddEntryFragmentSubcomponent {
      private AddEntryFragmentSubcomponentImpl(AddEntryFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(AddEntryFragment arg0) {
        injectAddEntryFragment(arg0);
      }

      private AddEntryFragment injectAddEntryFragment(AddEntryFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance,
            EditEntryActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        AddEntryFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class DetailFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeDetailFragment.DetailFragmentSubcomponent.Builder {
      private DetailFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeDetailFragment.DetailFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(DetailFragment.class.getCanonicalName() + " must be set");
        }
        return new DetailFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(DetailFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class DetailFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeDetailFragment.DetailFragmentSubcomponent {
      private DetailFragmentSubcomponentImpl(DetailFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(DetailFragment arg0) {
        injectDetailFragment(arg0);
      }

      private DetailFragment injectDetailFragment(DetailFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance,
            EditEntryActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        DetailFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class SelectBudgetFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeSelectBudgetFragment
            .SelectBudgetFragmentSubcomponent.Builder {
      private SelectBudgetFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeSelectBudgetFragment.SelectBudgetFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              SelectBudgetFragment.class.getCanonicalName() + " must be set");
        }
        return new SelectBudgetFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(SelectBudgetFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class SelectBudgetFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeSelectBudgetFragment
            .SelectBudgetFragmentSubcomponent {
      private SelectBudgetFragmentSubcomponentImpl(
          SelectBudgetFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(SelectBudgetFragment arg0) {
        injectSelectBudgetFragment(arg0);
      }

      private SelectBudgetFragment injectSelectBudgetFragment(SelectBudgetFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance,
            EditEntryActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        SelectBudgetFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class AddBudgetFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeAddBudgetFragment.AddBudgetFragmentSubcomponent
            .Builder {
      private AddBudgetFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeAddBudgetFragment.AddBudgetFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              AddBudgetFragment.class.getCanonicalName() + " must be set");
        }
        return new AddBudgetFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(AddBudgetFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class AddBudgetFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeAddBudgetFragment
            .AddBudgetFragmentSubcomponent {
      private AddBudgetFragmentSubcomponentImpl(AddBudgetFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(AddBudgetFragment arg0) {
        injectAddBudgetFragment(arg0);
      }

      private AddBudgetFragment injectAddBudgetFragment(AddBudgetFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance,
            EditEntryActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        AddBudgetFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class EditBudgetFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeEditBudgetFragment.EditBudgetFragmentSubcomponent
            .Builder {
      private EditBudgetFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeEditBudgetFragment.EditBudgetFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              EditBudgetFragment.class.getCanonicalName() + " must be set");
        }
        return new EditBudgetFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(EditBudgetFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class EditBudgetFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeEditBudgetFragment
            .EditBudgetFragmentSubcomponent {
      private EditBudgetFragmentSubcomponentImpl(EditBudgetFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(EditBudgetFragment arg0) {
        injectEditBudgetFragment(arg0);
      }

      private EditBudgetFragment injectEditBudgetFragment(EditBudgetFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance,
            EditEntryActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        EditBudgetFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class SummaryFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeSummaryFragment.SummaryFragmentSubcomponent
            .Builder {
      private SummaryFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeSummaryFragment.SummaryFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              SummaryFragment.class.getCanonicalName() + " must be set");
        }
        return new SummaryFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(SummaryFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class SummaryFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeSummaryFragment.SummaryFragmentSubcomponent {
      private SummaryFragmentSubcomponentImpl(SummaryFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(SummaryFragment arg0) {
        injectSummaryFragment(arg0);
      }

      private SummaryFragment injectSummaryFragment(SummaryFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance,
            EditEntryActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        SummaryFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class EditEntryFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeEditEntryFragment.EditEntryFragmentSubcomponent
            .Builder {
      private EditEntryFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeEditEntryFragment.EditEntryFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              EditEntryFragment.class.getCanonicalName() + " must be set");
        }
        return new EditEntryFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(EditEntryFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class EditEntryFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeEditEntryFragment
            .EditEntryFragmentSubcomponent {
      private EditEntryFragmentSubcomponentImpl(EditEntryFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(EditEntryFragment arg0) {
        injectEditEntryFragment(arg0);
      }

      private EditEntryFragment injectEditEntryFragment(EditEntryFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance,
            EditEntryActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        EditEntryFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }
  }

  private final class SelectBudgetActivitySubcomponentBuilder
      extends ActivityBuildersModule_ContributeSelectBudgetActivity.SelectBudgetActivitySubcomponent
          .Builder {
    private SelectBudgetActivity seedInstance;

    @Override
    public ActivityBuildersModule_ContributeSelectBudgetActivity.SelectBudgetActivitySubcomponent
        build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            SelectBudgetActivity.class.getCanonicalName() + " must be set");
      }
      return new SelectBudgetActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(SelectBudgetActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class SelectBudgetActivitySubcomponentImpl
      implements ActivityBuildersModule_ContributeSelectBudgetActivity
          .SelectBudgetActivitySubcomponent {
    private Provider<
            FragmentBuildersModule_ContributeAddEntryFragment.AddEntryFragmentSubcomponent.Builder>
        addEntryFragmentSubcomponentBuilderProvider;

    private Provider<
            FragmentBuildersModule_ContributeDetailFragment.DetailFragmentSubcomponent.Builder>
        detailFragmentSubcomponentBuilderProvider;

    private Provider<
            FragmentBuildersModule_ContributeSelectBudgetFragment.SelectBudgetFragmentSubcomponent
                .Builder>
        selectBudgetFragmentSubcomponentBuilderProvider;

    private Provider<
            FragmentBuildersModule_ContributeAddBudgetFragment.AddBudgetFragmentSubcomponent
                .Builder>
        addBudgetFragmentSubcomponentBuilderProvider;

    private Provider<
            FragmentBuildersModule_ContributeEditBudgetFragment.EditBudgetFragmentSubcomponent
                .Builder>
        editBudgetFragmentSubcomponentBuilderProvider;

    private Provider<
            FragmentBuildersModule_ContributeSummaryFragment.SummaryFragmentSubcomponent.Builder>
        summaryFragmentSubcomponentBuilderProvider;

    private Provider<
            FragmentBuildersModule_ContributeEditEntryFragment.EditEntryFragmentSubcomponent
                .Builder>
        editEntryFragmentSubcomponentBuilderProvider;

    private SelectBudgetActivitySubcomponentImpl(SelectBudgetActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    private Map<
            Class<? extends androidx.fragment.app.Fragment>,
            Provider<AndroidInjector.Factory<? extends androidx.fragment.app.Fragment>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return MapBuilder
          .<Class<? extends androidx.fragment.app.Fragment>,
              Provider<AndroidInjector.Factory<? extends androidx.fragment.app.Fragment>>>
              newMapBuilder(7)
          .put(AddEntryFragment.class, (Provider) addEntryFragmentSubcomponentBuilderProvider)
          .put(DetailFragment.class, (Provider) detailFragmentSubcomponentBuilderProvider)
          .put(
              SelectBudgetFragment.class,
              (Provider) selectBudgetFragmentSubcomponentBuilderProvider)
          .put(AddBudgetFragment.class, (Provider) addBudgetFragmentSubcomponentBuilderProvider)
          .put(EditBudgetFragment.class, (Provider) editBudgetFragmentSubcomponentBuilderProvider)
          .put(SummaryFragment.class, (Provider) summaryFragmentSubcomponentBuilderProvider)
          .put(EditEntryFragment.class, (Provider) editEntryFragmentSubcomponentBuilderProvider)
          .build();
    }

    private DispatchingAndroidInjector<androidx.fragment.app.Fragment>
        getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SelectBudgetActivitySubcomponentBuilder builder) {
      this.addEntryFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeAddEntryFragment.AddEntryFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeAddEntryFragment.AddEntryFragmentSubcomponent
                    .Builder
                get() {
              return new AddEntryFragmentSubcomponentBuilder();
            }
          };
      this.detailFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeDetailFragment.DetailFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeDetailFragment.DetailFragmentSubcomponent
                    .Builder
                get() {
              return new DetailFragmentSubcomponentBuilder();
            }
          };
      this.selectBudgetFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeSelectBudgetFragment.SelectBudgetFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeSelectBudgetFragment
                    .SelectBudgetFragmentSubcomponent.Builder
                get() {
              return new SelectBudgetFragmentSubcomponentBuilder();
            }
          };
      this.addBudgetFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeAddBudgetFragment.AddBudgetFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeAddBudgetFragment.AddBudgetFragmentSubcomponent
                    .Builder
                get() {
              return new AddBudgetFragmentSubcomponentBuilder();
            }
          };
      this.editBudgetFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeEditBudgetFragment.EditBudgetFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeEditBudgetFragment
                    .EditBudgetFragmentSubcomponent.Builder
                get() {
              return new EditBudgetFragmentSubcomponentBuilder();
            }
          };
      this.summaryFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeSummaryFragment.SummaryFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeSummaryFragment.SummaryFragmentSubcomponent
                    .Builder
                get() {
              return new SummaryFragmentSubcomponentBuilder();
            }
          };
      this.editEntryFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeEditEntryFragment.EditEntryFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeEditEntryFragment.EditEntryFragmentSubcomponent
                    .Builder
                get() {
              return new EditEntryFragmentSubcomponentBuilder();
            }
          };
    }

    @Override
    public void inject(SelectBudgetActivity arg0) {
      injectSelectBudgetActivity(arg0);
    }

    private SelectBudgetActivity injectSelectBudgetActivity(SelectBudgetActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectSupportFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      DaggerAppCompatActivity_MembersInjector.injectFrameworkFragmentInjector(
          instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfFragment());
      return instance;
    }

    private final class AddEntryFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeAddEntryFragment.AddEntryFragmentSubcomponent
            .Builder {
      private AddEntryFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeAddEntryFragment.AddEntryFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              AddEntryFragment.class.getCanonicalName() + " must be set");
        }
        return new AddEntryFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(AddEntryFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class AddEntryFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeAddEntryFragment.AddEntryFragmentSubcomponent {
      private AddEntryFragmentSubcomponentImpl(AddEntryFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(AddEntryFragment arg0) {
        injectAddEntryFragment(arg0);
      }

      private AddEntryFragment injectAddEntryFragment(AddEntryFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance,
            SelectBudgetActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        AddEntryFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class DetailFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeDetailFragment.DetailFragmentSubcomponent.Builder {
      private DetailFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeDetailFragment.DetailFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(DetailFragment.class.getCanonicalName() + " must be set");
        }
        return new DetailFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(DetailFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class DetailFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeDetailFragment.DetailFragmentSubcomponent {
      private DetailFragmentSubcomponentImpl(DetailFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(DetailFragment arg0) {
        injectDetailFragment(arg0);
      }

      private DetailFragment injectDetailFragment(DetailFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance,
            SelectBudgetActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        DetailFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class SelectBudgetFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeSelectBudgetFragment
            .SelectBudgetFragmentSubcomponent.Builder {
      private SelectBudgetFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeSelectBudgetFragment.SelectBudgetFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              SelectBudgetFragment.class.getCanonicalName() + " must be set");
        }
        return new SelectBudgetFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(SelectBudgetFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class SelectBudgetFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeSelectBudgetFragment
            .SelectBudgetFragmentSubcomponent {
      private SelectBudgetFragmentSubcomponentImpl(
          SelectBudgetFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(SelectBudgetFragment arg0) {
        injectSelectBudgetFragment(arg0);
      }

      private SelectBudgetFragment injectSelectBudgetFragment(SelectBudgetFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance,
            SelectBudgetActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        SelectBudgetFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class AddBudgetFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeAddBudgetFragment.AddBudgetFragmentSubcomponent
            .Builder {
      private AddBudgetFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeAddBudgetFragment.AddBudgetFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              AddBudgetFragment.class.getCanonicalName() + " must be set");
        }
        return new AddBudgetFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(AddBudgetFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class AddBudgetFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeAddBudgetFragment
            .AddBudgetFragmentSubcomponent {
      private AddBudgetFragmentSubcomponentImpl(AddBudgetFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(AddBudgetFragment arg0) {
        injectAddBudgetFragment(arg0);
      }

      private AddBudgetFragment injectAddBudgetFragment(AddBudgetFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance,
            SelectBudgetActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        AddBudgetFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class EditBudgetFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeEditBudgetFragment.EditBudgetFragmentSubcomponent
            .Builder {
      private EditBudgetFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeEditBudgetFragment.EditBudgetFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              EditBudgetFragment.class.getCanonicalName() + " must be set");
        }
        return new EditBudgetFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(EditBudgetFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class EditBudgetFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeEditBudgetFragment
            .EditBudgetFragmentSubcomponent {
      private EditBudgetFragmentSubcomponentImpl(EditBudgetFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(EditBudgetFragment arg0) {
        injectEditBudgetFragment(arg0);
      }

      private EditBudgetFragment injectEditBudgetFragment(EditBudgetFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance,
            SelectBudgetActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        EditBudgetFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class SummaryFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeSummaryFragment.SummaryFragmentSubcomponent
            .Builder {
      private SummaryFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeSummaryFragment.SummaryFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              SummaryFragment.class.getCanonicalName() + " must be set");
        }
        return new SummaryFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(SummaryFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class SummaryFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeSummaryFragment.SummaryFragmentSubcomponent {
      private SummaryFragmentSubcomponentImpl(SummaryFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(SummaryFragment arg0) {
        injectSummaryFragment(arg0);
      }

      private SummaryFragment injectSummaryFragment(SummaryFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance,
            SelectBudgetActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        SummaryFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class EditEntryFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeEditEntryFragment.EditEntryFragmentSubcomponent
            .Builder {
      private EditEntryFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeEditEntryFragment.EditEntryFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              EditEntryFragment.class.getCanonicalName() + " must be set");
        }
        return new EditEntryFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(EditEntryFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class EditEntryFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeEditEntryFragment
            .EditEntryFragmentSubcomponent {
      private EditEntryFragmentSubcomponentImpl(EditEntryFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(EditEntryFragment arg0) {
        injectEditEntryFragment(arg0);
      }

      private EditEntryFragment injectEditEntryFragment(EditEntryFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance,
            SelectBudgetActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        EditEntryFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }
  }

  private final class AddBudgetActivitySubcomponentBuilder
      extends ActivityBuildersModule_ContributeAddBudgetActivity.AddBudgetActivitySubcomponent
          .Builder {
    private AddBudgetActivity seedInstance;

    @Override
    public ActivityBuildersModule_ContributeAddBudgetActivity.AddBudgetActivitySubcomponent
        build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            AddBudgetActivity.class.getCanonicalName() + " must be set");
      }
      return new AddBudgetActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(AddBudgetActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class AddBudgetActivitySubcomponentImpl
      implements ActivityBuildersModule_ContributeAddBudgetActivity.AddBudgetActivitySubcomponent {
    private Provider<
            FragmentBuildersModule_ContributeAddEntryFragment.AddEntryFragmentSubcomponent.Builder>
        addEntryFragmentSubcomponentBuilderProvider;

    private Provider<
            FragmentBuildersModule_ContributeDetailFragment.DetailFragmentSubcomponent.Builder>
        detailFragmentSubcomponentBuilderProvider;

    private Provider<
            FragmentBuildersModule_ContributeSelectBudgetFragment.SelectBudgetFragmentSubcomponent
                .Builder>
        selectBudgetFragmentSubcomponentBuilderProvider;

    private Provider<
            FragmentBuildersModule_ContributeAddBudgetFragment.AddBudgetFragmentSubcomponent
                .Builder>
        addBudgetFragmentSubcomponentBuilderProvider;

    private Provider<
            FragmentBuildersModule_ContributeEditBudgetFragment.EditBudgetFragmentSubcomponent
                .Builder>
        editBudgetFragmentSubcomponentBuilderProvider;

    private Provider<
            FragmentBuildersModule_ContributeSummaryFragment.SummaryFragmentSubcomponent.Builder>
        summaryFragmentSubcomponentBuilderProvider;

    private Provider<
            FragmentBuildersModule_ContributeEditEntryFragment.EditEntryFragmentSubcomponent
                .Builder>
        editEntryFragmentSubcomponentBuilderProvider;

    private AddBudgetActivitySubcomponentImpl(AddBudgetActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    private Map<
            Class<? extends androidx.fragment.app.Fragment>,
            Provider<AndroidInjector.Factory<? extends androidx.fragment.app.Fragment>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return MapBuilder
          .<Class<? extends androidx.fragment.app.Fragment>,
              Provider<AndroidInjector.Factory<? extends androidx.fragment.app.Fragment>>>
              newMapBuilder(7)
          .put(AddEntryFragment.class, (Provider) addEntryFragmentSubcomponentBuilderProvider)
          .put(DetailFragment.class, (Provider) detailFragmentSubcomponentBuilderProvider)
          .put(
              SelectBudgetFragment.class,
              (Provider) selectBudgetFragmentSubcomponentBuilderProvider)
          .put(AddBudgetFragment.class, (Provider) addBudgetFragmentSubcomponentBuilderProvider)
          .put(EditBudgetFragment.class, (Provider) editBudgetFragmentSubcomponentBuilderProvider)
          .put(SummaryFragment.class, (Provider) summaryFragmentSubcomponentBuilderProvider)
          .put(EditEntryFragment.class, (Provider) editEntryFragmentSubcomponentBuilderProvider)
          .build();
    }

    private DispatchingAndroidInjector<androidx.fragment.app.Fragment>
        getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final AddBudgetActivitySubcomponentBuilder builder) {
      this.addEntryFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeAddEntryFragment.AddEntryFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeAddEntryFragment.AddEntryFragmentSubcomponent
                    .Builder
                get() {
              return new AddEntryFragmentSubcomponentBuilder();
            }
          };
      this.detailFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeDetailFragment.DetailFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeDetailFragment.DetailFragmentSubcomponent
                    .Builder
                get() {
              return new DetailFragmentSubcomponentBuilder();
            }
          };
      this.selectBudgetFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeSelectBudgetFragment.SelectBudgetFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeSelectBudgetFragment
                    .SelectBudgetFragmentSubcomponent.Builder
                get() {
              return new SelectBudgetFragmentSubcomponentBuilder();
            }
          };
      this.addBudgetFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeAddBudgetFragment.AddBudgetFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeAddBudgetFragment.AddBudgetFragmentSubcomponent
                    .Builder
                get() {
              return new AddBudgetFragmentSubcomponentBuilder();
            }
          };
      this.editBudgetFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeEditBudgetFragment.EditBudgetFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeEditBudgetFragment
                    .EditBudgetFragmentSubcomponent.Builder
                get() {
              return new EditBudgetFragmentSubcomponentBuilder();
            }
          };
      this.summaryFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeSummaryFragment.SummaryFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeSummaryFragment.SummaryFragmentSubcomponent
                    .Builder
                get() {
              return new SummaryFragmentSubcomponentBuilder();
            }
          };
      this.editEntryFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeEditEntryFragment.EditEntryFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeEditEntryFragment.EditEntryFragmentSubcomponent
                    .Builder
                get() {
              return new EditEntryFragmentSubcomponentBuilder();
            }
          };
    }

    @Override
    public void inject(AddBudgetActivity arg0) {
      injectAddBudgetActivity(arg0);
    }

    private AddBudgetActivity injectAddBudgetActivity(AddBudgetActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectSupportFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      DaggerAppCompatActivity_MembersInjector.injectFrameworkFragmentInjector(
          instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfFragment());
      return instance;
    }

    private final class AddEntryFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeAddEntryFragment.AddEntryFragmentSubcomponent
            .Builder {
      private AddEntryFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeAddEntryFragment.AddEntryFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              AddEntryFragment.class.getCanonicalName() + " must be set");
        }
        return new AddEntryFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(AddEntryFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class AddEntryFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeAddEntryFragment.AddEntryFragmentSubcomponent {
      private AddEntryFragmentSubcomponentImpl(AddEntryFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(AddEntryFragment arg0) {
        injectAddEntryFragment(arg0);
      }

      private AddEntryFragment injectAddEntryFragment(AddEntryFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance,
            AddBudgetActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        AddEntryFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class DetailFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeDetailFragment.DetailFragmentSubcomponent.Builder {
      private DetailFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeDetailFragment.DetailFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(DetailFragment.class.getCanonicalName() + " must be set");
        }
        return new DetailFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(DetailFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class DetailFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeDetailFragment.DetailFragmentSubcomponent {
      private DetailFragmentSubcomponentImpl(DetailFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(DetailFragment arg0) {
        injectDetailFragment(arg0);
      }

      private DetailFragment injectDetailFragment(DetailFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance,
            AddBudgetActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        DetailFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class SelectBudgetFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeSelectBudgetFragment
            .SelectBudgetFragmentSubcomponent.Builder {
      private SelectBudgetFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeSelectBudgetFragment.SelectBudgetFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              SelectBudgetFragment.class.getCanonicalName() + " must be set");
        }
        return new SelectBudgetFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(SelectBudgetFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class SelectBudgetFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeSelectBudgetFragment
            .SelectBudgetFragmentSubcomponent {
      private SelectBudgetFragmentSubcomponentImpl(
          SelectBudgetFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(SelectBudgetFragment arg0) {
        injectSelectBudgetFragment(arg0);
      }

      private SelectBudgetFragment injectSelectBudgetFragment(SelectBudgetFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance,
            AddBudgetActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        SelectBudgetFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class AddBudgetFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeAddBudgetFragment.AddBudgetFragmentSubcomponent
            .Builder {
      private AddBudgetFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeAddBudgetFragment.AddBudgetFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              AddBudgetFragment.class.getCanonicalName() + " must be set");
        }
        return new AddBudgetFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(AddBudgetFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class AddBudgetFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeAddBudgetFragment
            .AddBudgetFragmentSubcomponent {
      private AddBudgetFragmentSubcomponentImpl(AddBudgetFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(AddBudgetFragment arg0) {
        injectAddBudgetFragment(arg0);
      }

      private AddBudgetFragment injectAddBudgetFragment(AddBudgetFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance,
            AddBudgetActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        AddBudgetFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class EditBudgetFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeEditBudgetFragment.EditBudgetFragmentSubcomponent
            .Builder {
      private EditBudgetFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeEditBudgetFragment.EditBudgetFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              EditBudgetFragment.class.getCanonicalName() + " must be set");
        }
        return new EditBudgetFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(EditBudgetFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class EditBudgetFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeEditBudgetFragment
            .EditBudgetFragmentSubcomponent {
      private EditBudgetFragmentSubcomponentImpl(EditBudgetFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(EditBudgetFragment arg0) {
        injectEditBudgetFragment(arg0);
      }

      private EditBudgetFragment injectEditBudgetFragment(EditBudgetFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance,
            AddBudgetActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        EditBudgetFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class SummaryFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeSummaryFragment.SummaryFragmentSubcomponent
            .Builder {
      private SummaryFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeSummaryFragment.SummaryFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              SummaryFragment.class.getCanonicalName() + " must be set");
        }
        return new SummaryFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(SummaryFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class SummaryFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeSummaryFragment.SummaryFragmentSubcomponent {
      private SummaryFragmentSubcomponentImpl(SummaryFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(SummaryFragment arg0) {
        injectSummaryFragment(arg0);
      }

      private SummaryFragment injectSummaryFragment(SummaryFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance,
            AddBudgetActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        SummaryFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class EditEntryFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeEditEntryFragment.EditEntryFragmentSubcomponent
            .Builder {
      private EditEntryFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeEditEntryFragment.EditEntryFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              EditEntryFragment.class.getCanonicalName() + " must be set");
        }
        return new EditEntryFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(EditEntryFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class EditEntryFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeEditEntryFragment
            .EditEntryFragmentSubcomponent {
      private EditEntryFragmentSubcomponentImpl(EditEntryFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(EditEntryFragment arg0) {
        injectEditEntryFragment(arg0);
      }

      private EditEntryFragment injectEditEntryFragment(EditEntryFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance,
            AddBudgetActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        EditEntryFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }
  }

  private final class EditBudgetActivitySubcomponentBuilder
      extends ActivityBuildersModule_ContributeEditBudgetActivity.EditBudgetActivitySubcomponent
          .Builder {
    private EditBudgetActivity seedInstance;

    @Override
    public ActivityBuildersModule_ContributeEditBudgetActivity.EditBudgetActivitySubcomponent
        build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            EditBudgetActivity.class.getCanonicalName() + " must be set");
      }
      return new EditBudgetActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(EditBudgetActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class EditBudgetActivitySubcomponentImpl
      implements ActivityBuildersModule_ContributeEditBudgetActivity
          .EditBudgetActivitySubcomponent {
    private Provider<
            FragmentBuildersModule_ContributeAddEntryFragment.AddEntryFragmentSubcomponent.Builder>
        addEntryFragmentSubcomponentBuilderProvider;

    private Provider<
            FragmentBuildersModule_ContributeDetailFragment.DetailFragmentSubcomponent.Builder>
        detailFragmentSubcomponentBuilderProvider;

    private Provider<
            FragmentBuildersModule_ContributeSelectBudgetFragment.SelectBudgetFragmentSubcomponent
                .Builder>
        selectBudgetFragmentSubcomponentBuilderProvider;

    private Provider<
            FragmentBuildersModule_ContributeAddBudgetFragment.AddBudgetFragmentSubcomponent
                .Builder>
        addBudgetFragmentSubcomponentBuilderProvider;

    private Provider<
            FragmentBuildersModule_ContributeEditBudgetFragment.EditBudgetFragmentSubcomponent
                .Builder>
        editBudgetFragmentSubcomponentBuilderProvider;

    private Provider<
            FragmentBuildersModule_ContributeSummaryFragment.SummaryFragmentSubcomponent.Builder>
        summaryFragmentSubcomponentBuilderProvider;

    private Provider<
            FragmentBuildersModule_ContributeEditEntryFragment.EditEntryFragmentSubcomponent
                .Builder>
        editEntryFragmentSubcomponentBuilderProvider;

    private EditBudgetActivitySubcomponentImpl(EditBudgetActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    private Map<
            Class<? extends androidx.fragment.app.Fragment>,
            Provider<AndroidInjector.Factory<? extends androidx.fragment.app.Fragment>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return MapBuilder
          .<Class<? extends androidx.fragment.app.Fragment>,
              Provider<AndroidInjector.Factory<? extends androidx.fragment.app.Fragment>>>
              newMapBuilder(7)
          .put(AddEntryFragment.class, (Provider) addEntryFragmentSubcomponentBuilderProvider)
          .put(DetailFragment.class, (Provider) detailFragmentSubcomponentBuilderProvider)
          .put(
              SelectBudgetFragment.class,
              (Provider) selectBudgetFragmentSubcomponentBuilderProvider)
          .put(AddBudgetFragment.class, (Provider) addBudgetFragmentSubcomponentBuilderProvider)
          .put(EditBudgetFragment.class, (Provider) editBudgetFragmentSubcomponentBuilderProvider)
          .put(SummaryFragment.class, (Provider) summaryFragmentSubcomponentBuilderProvider)
          .put(EditEntryFragment.class, (Provider) editEntryFragmentSubcomponentBuilderProvider)
          .build();
    }

    private DispatchingAndroidInjector<androidx.fragment.app.Fragment>
        getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final EditBudgetActivitySubcomponentBuilder builder) {
      this.addEntryFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeAddEntryFragment.AddEntryFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeAddEntryFragment.AddEntryFragmentSubcomponent
                    .Builder
                get() {
              return new AddEntryFragmentSubcomponentBuilder();
            }
          };
      this.detailFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeDetailFragment.DetailFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeDetailFragment.DetailFragmentSubcomponent
                    .Builder
                get() {
              return new DetailFragmentSubcomponentBuilder();
            }
          };
      this.selectBudgetFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeSelectBudgetFragment.SelectBudgetFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeSelectBudgetFragment
                    .SelectBudgetFragmentSubcomponent.Builder
                get() {
              return new SelectBudgetFragmentSubcomponentBuilder();
            }
          };
      this.addBudgetFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeAddBudgetFragment.AddBudgetFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeAddBudgetFragment.AddBudgetFragmentSubcomponent
                    .Builder
                get() {
              return new AddBudgetFragmentSubcomponentBuilder();
            }
          };
      this.editBudgetFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeEditBudgetFragment.EditBudgetFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeEditBudgetFragment
                    .EditBudgetFragmentSubcomponent.Builder
                get() {
              return new EditBudgetFragmentSubcomponentBuilder();
            }
          };
      this.summaryFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeSummaryFragment.SummaryFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeSummaryFragment.SummaryFragmentSubcomponent
                    .Builder
                get() {
              return new SummaryFragmentSubcomponentBuilder();
            }
          };
      this.editEntryFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeEditEntryFragment.EditEntryFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeEditEntryFragment.EditEntryFragmentSubcomponent
                    .Builder
                get() {
              return new EditEntryFragmentSubcomponentBuilder();
            }
          };
    }

    @Override
    public void inject(EditBudgetActivity arg0) {
      injectEditBudgetActivity(arg0);
    }

    private EditBudgetActivity injectEditBudgetActivity(EditBudgetActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectSupportFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      DaggerAppCompatActivity_MembersInjector.injectFrameworkFragmentInjector(
          instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfFragment());
      return instance;
    }

    private final class AddEntryFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeAddEntryFragment.AddEntryFragmentSubcomponent
            .Builder {
      private AddEntryFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeAddEntryFragment.AddEntryFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              AddEntryFragment.class.getCanonicalName() + " must be set");
        }
        return new AddEntryFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(AddEntryFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class AddEntryFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeAddEntryFragment.AddEntryFragmentSubcomponent {
      private AddEntryFragmentSubcomponentImpl(AddEntryFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(AddEntryFragment arg0) {
        injectAddEntryFragment(arg0);
      }

      private AddEntryFragment injectAddEntryFragment(AddEntryFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance,
            EditBudgetActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        AddEntryFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class DetailFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeDetailFragment.DetailFragmentSubcomponent.Builder {
      private DetailFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeDetailFragment.DetailFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(DetailFragment.class.getCanonicalName() + " must be set");
        }
        return new DetailFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(DetailFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class DetailFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeDetailFragment.DetailFragmentSubcomponent {
      private DetailFragmentSubcomponentImpl(DetailFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(DetailFragment arg0) {
        injectDetailFragment(arg0);
      }

      private DetailFragment injectDetailFragment(DetailFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance,
            EditBudgetActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        DetailFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class SelectBudgetFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeSelectBudgetFragment
            .SelectBudgetFragmentSubcomponent.Builder {
      private SelectBudgetFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeSelectBudgetFragment.SelectBudgetFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              SelectBudgetFragment.class.getCanonicalName() + " must be set");
        }
        return new SelectBudgetFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(SelectBudgetFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class SelectBudgetFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeSelectBudgetFragment
            .SelectBudgetFragmentSubcomponent {
      private SelectBudgetFragmentSubcomponentImpl(
          SelectBudgetFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(SelectBudgetFragment arg0) {
        injectSelectBudgetFragment(arg0);
      }

      private SelectBudgetFragment injectSelectBudgetFragment(SelectBudgetFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance,
            EditBudgetActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        SelectBudgetFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class AddBudgetFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeAddBudgetFragment.AddBudgetFragmentSubcomponent
            .Builder {
      private AddBudgetFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeAddBudgetFragment.AddBudgetFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              AddBudgetFragment.class.getCanonicalName() + " must be set");
        }
        return new AddBudgetFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(AddBudgetFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class AddBudgetFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeAddBudgetFragment
            .AddBudgetFragmentSubcomponent {
      private AddBudgetFragmentSubcomponentImpl(AddBudgetFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(AddBudgetFragment arg0) {
        injectAddBudgetFragment(arg0);
      }

      private AddBudgetFragment injectAddBudgetFragment(AddBudgetFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance,
            EditBudgetActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        AddBudgetFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class EditBudgetFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeEditBudgetFragment.EditBudgetFragmentSubcomponent
            .Builder {
      private EditBudgetFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeEditBudgetFragment.EditBudgetFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              EditBudgetFragment.class.getCanonicalName() + " must be set");
        }
        return new EditBudgetFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(EditBudgetFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class EditBudgetFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeEditBudgetFragment
            .EditBudgetFragmentSubcomponent {
      private EditBudgetFragmentSubcomponentImpl(EditBudgetFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(EditBudgetFragment arg0) {
        injectEditBudgetFragment(arg0);
      }

      private EditBudgetFragment injectEditBudgetFragment(EditBudgetFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance,
            EditBudgetActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        EditBudgetFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class SummaryFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeSummaryFragment.SummaryFragmentSubcomponent
            .Builder {
      private SummaryFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeSummaryFragment.SummaryFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              SummaryFragment.class.getCanonicalName() + " must be set");
        }
        return new SummaryFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(SummaryFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class SummaryFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeSummaryFragment.SummaryFragmentSubcomponent {
      private SummaryFragmentSubcomponentImpl(SummaryFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(SummaryFragment arg0) {
        injectSummaryFragment(arg0);
      }

      private SummaryFragment injectSummaryFragment(SummaryFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance,
            EditBudgetActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        SummaryFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class EditEntryFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeEditEntryFragment.EditEntryFragmentSubcomponent
            .Builder {
      private EditEntryFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeEditEntryFragment.EditEntryFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              EditEntryFragment.class.getCanonicalName() + " must be set");
        }
        return new EditEntryFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(EditEntryFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class EditEntryFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeEditEntryFragment
            .EditEntryFragmentSubcomponent {
      private EditEntryFragmentSubcomponentImpl(EditEntryFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(EditEntryFragment arg0) {
        injectEditEntryFragment(arg0);
      }

      private EditEntryFragment injectEditEntryFragment(EditEntryFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance,
            EditBudgetActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        EditEntryFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }
  }
}
