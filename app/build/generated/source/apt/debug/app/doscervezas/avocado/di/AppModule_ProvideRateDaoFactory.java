// Generated by Dagger (https://google.github.io/dagger).
package app.doscervezas.avocado.di;

import app.doscervezas.avocado.db.RateDatabase;
import app.doscervezas.avocado.db.dao.RateDao;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class AppModule_ProvideRateDaoFactory implements Factory<RateDao> {
  private final AppModule module;

  private final Provider<RateDatabase> rateDatabaseProvider;

  public AppModule_ProvideRateDaoFactory(
      AppModule module, Provider<RateDatabase> rateDatabaseProvider) {
    this.module = module;
    this.rateDatabaseProvider = rateDatabaseProvider;
  }

  @Override
  public RateDao get() {
    return provideInstance(module, rateDatabaseProvider);
  }

  public static RateDao provideInstance(
      AppModule module, Provider<RateDatabase> rateDatabaseProvider) {
    return proxyProvideRateDao(module, rateDatabaseProvider.get());
  }

  public static AppModule_ProvideRateDaoFactory create(
      AppModule module, Provider<RateDatabase> rateDatabaseProvider) {
    return new AppModule_ProvideRateDaoFactory(module, rateDatabaseProvider);
  }

  public static RateDao proxyProvideRateDao(AppModule instance, RateDatabase rateDatabase) {
    return Preconditions.checkNotNull(
        instance.provideRateDao(rateDatabase),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
