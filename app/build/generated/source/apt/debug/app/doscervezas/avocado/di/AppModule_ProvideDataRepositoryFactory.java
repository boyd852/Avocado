// Generated by Dagger (https://google.github.io/dagger).
package app.doscervezas.avocado.di;

import android.app.Application;
import app.doscervezas.avocado.db.dao.BudgetDao;
import app.doscervezas.avocado.db.dao.DefaultRatesDao;
import app.doscervezas.avocado.db.dao.RateDao;
import app.doscervezas.avocado.db.dao.SpendDao;
import app.doscervezas.avocado.repository.DataRepository;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class AppModule_ProvideDataRepositoryFactory implements Factory<DataRepository> {
  private final AppModule module;

  private final Provider<RateDao> rateDaoProvider;

  private final Provider<DefaultRatesDao> defaultRatesDaoProvider;

  private final Provider<SpendDao> spendDaoProvider;

  private final Provider<BudgetDao> budgetDaoProvider;

  private final Provider<Application> appProvider;

  public AppModule_ProvideDataRepositoryFactory(
      AppModule module,
      Provider<RateDao> rateDaoProvider,
      Provider<DefaultRatesDao> defaultRatesDaoProvider,
      Provider<SpendDao> spendDaoProvider,
      Provider<BudgetDao> budgetDaoProvider,
      Provider<Application> appProvider) {
    this.module = module;
    this.rateDaoProvider = rateDaoProvider;
    this.defaultRatesDaoProvider = defaultRatesDaoProvider;
    this.spendDaoProvider = spendDaoProvider;
    this.budgetDaoProvider = budgetDaoProvider;
    this.appProvider = appProvider;
  }

  @Override
  public DataRepository get() {
    return provideInstance(
        module,
        rateDaoProvider,
        defaultRatesDaoProvider,
        spendDaoProvider,
        budgetDaoProvider,
        appProvider);
  }

  public static DataRepository provideInstance(
      AppModule module,
      Provider<RateDao> rateDaoProvider,
      Provider<DefaultRatesDao> defaultRatesDaoProvider,
      Provider<SpendDao> spendDaoProvider,
      Provider<BudgetDao> budgetDaoProvider,
      Provider<Application> appProvider) {
    return proxyProvideDataRepository(
        module,
        rateDaoProvider.get(),
        defaultRatesDaoProvider.get(),
        spendDaoProvider.get(),
        budgetDaoProvider.get(),
        appProvider.get());
  }

  public static AppModule_ProvideDataRepositoryFactory create(
      AppModule module,
      Provider<RateDao> rateDaoProvider,
      Provider<DefaultRatesDao> defaultRatesDaoProvider,
      Provider<SpendDao> spendDaoProvider,
      Provider<BudgetDao> budgetDaoProvider,
      Provider<Application> appProvider) {
    return new AppModule_ProvideDataRepositoryFactory(
        module,
        rateDaoProvider,
        defaultRatesDaoProvider,
        spendDaoProvider,
        budgetDaoProvider,
        appProvider);
  }

  public static DataRepository proxyProvideDataRepository(
      AppModule instance,
      RateDao rateDao,
      DefaultRatesDao defaultRatesDao,
      SpendDao spendDao,
      BudgetDao budgetDao,
      Application app) {
    return Preconditions.checkNotNull(
        instance.provideDataRepository(rateDao, defaultRatesDao, spendDao, budgetDao, app),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
