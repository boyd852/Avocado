// Generated by Dagger (https://google.github.io/dagger).
package app.doscervezas.avocado.di;

import app.doscervezas.avocado.db.DefaultRatesDatabase;
import app.doscervezas.avocado.db.dao.DefaultRatesDao;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class AppModule_ProvideDefaultRatesDaoFactory implements Factory<DefaultRatesDao> {
  private final AppModule module;

  private final Provider<DefaultRatesDatabase> defaultRatesDatabaseProvider;

  public AppModule_ProvideDefaultRatesDaoFactory(
      AppModule module, Provider<DefaultRatesDatabase> defaultRatesDatabaseProvider) {
    this.module = module;
    this.defaultRatesDatabaseProvider = defaultRatesDatabaseProvider;
  }

  @Override
  public DefaultRatesDao get() {
    return provideInstance(module, defaultRatesDatabaseProvider);
  }

  public static DefaultRatesDao provideInstance(
      AppModule module, Provider<DefaultRatesDatabase> defaultRatesDatabaseProvider) {
    return proxyProvideDefaultRatesDao(module, defaultRatesDatabaseProvider.get());
  }

  public static AppModule_ProvideDefaultRatesDaoFactory create(
      AppModule module, Provider<DefaultRatesDatabase> defaultRatesDatabaseProvider) {
    return new AppModule_ProvideDefaultRatesDaoFactory(module, defaultRatesDatabaseProvider);
  }

  public static DefaultRatesDao proxyProvideDefaultRatesDao(
      AppModule instance, DefaultRatesDatabase defaultRatesDatabase) {
    return Preconditions.checkNotNull(
        instance.provideDefaultRatesDao(defaultRatesDatabase),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
